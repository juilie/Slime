{"version":3,"file":"slime-simulation.umd.js","sources":["../src/js/transManager.js","../src/js/shaderLoader.js","../src/js/simulation.js"],"sourcesContent":["import * as THREE from 'three';\n\nexport class TransitionManager {\n    constructor(simulationMaterial, renderMaterial) {\n        this.simulationMaterial = simulationMaterial;\n        this.renderMaterial = renderMaterial;\n        \n        this.state = {\n            baseColor: new THREE.Vector3(0.1, 0.01, 0.8),\n            targetBaseColor: new THREE.Vector3(0.1, 0.01, 0.8),\n            secondaryColor: new THREE.Vector4(0.0, 0.0, 0.0, 0.0),\n            targetSecondaryColor: new THREE.Vector4(0.0, 0.0, 0.0, 0.0),\n            neighborThreshold: 0.99,\n            targetNeighborThreshold: 0.99,\n            noiseFactor: 0.0,\n            targetNoiseFactor: 0.0,\n            roughness: 0.2,\n            targetRoughness: 0.2,\n            metalness: 0.0,\n            targetMetalness: 0.0,\n            speed: 0.15,\n            targetSpeed: 0.15,\n            isTransitioning: false,\n            duration: 100,\n            startTime: 0\n        };\n    }\n\n    startTransition(newState) {\n        const currentTime = performance.now();\n\n        // Store all current values as starting points\n        this.state.baseColor.set(\n            this.renderMaterial.uniforms.uBaseColor.value.x,\n            this.renderMaterial.uniforms.uBaseColor.value.y,\n            this.renderMaterial.uniforms.uBaseColor.value.z\n        );\n\n        this.state.secondaryColor.set(\n            this.renderMaterial.uniforms.uSecondaryColor.value.x,\n            this.renderMaterial.uniforms.uSecondaryColor.value.y,\n            this.renderMaterial.uniforms.uSecondaryColor.value.z,\n            this.renderMaterial.uniforms.uSecondaryColor.value.w\n        );\n\n        this.state.neighborThreshold = this.simulationMaterial.uniforms.uNeighborThreshold.value;\n        this.state.noiseFactor = this.simulationMaterial.uniforms.uNoiseFactor.value;\n        this.state.roughness = this.renderMaterial.uniforms.uRoughness.value;\n        this.state.metalness = this.renderMaterial.uniforms.uMetalness.value;\n        this.state.speed = this.simulationMaterial.uniforms.uSpeed.value;\n\n        // Set target values\n        if (newState.baseColor) {\n            this.state.targetBaseColor.set(\n                newState.baseColor[0],\n                newState.baseColor[1],\n                newState.baseColor[2]\n            );\n        } else {\n            this.state.targetBaseColor.copy(this.state.baseColor);\n        }\n\n        if (newState.secondaryColor) {\n            this.state.targetSecondaryColor.set(\n                newState.secondaryColor[0],\n                newState.secondaryColor[1],\n                newState.secondaryColor[2],\n                newState.secondaryColor[3]\n            );\n        } else {\n            this.state.targetSecondaryColor.copy(this.state.secondaryColor);\n        }\n\n        this.state.targetNeighborThreshold = newState.neighborThreshold !== undefined ? \n            newState.neighborThreshold : this.state.neighborThreshold;\n        this.state.targetNoiseFactor = newState.noiseFactor !== undefined ? \n            newState.noiseFactor : this.state.noiseFactor;\n        this.state.targetRoughness = newState.roughness !== undefined ? \n            newState.roughness : this.state.roughness;\n        this.state.targetMetalness = newState.metalness !== undefined ? \n            newState.metalness : this.state.metalness;\n        this.state.targetSpeed = newState.speed !== undefined ? \n            newState.speed : this.state.speed;\n\n        // Reset transition parameters\n        this.state.isTransitioning = true;\n        this.state.startTime = currentTime;\n        this.state.duration = newState.duration || 1000;\n    }\n\n    update() {\n        if (!this.state.isTransitioning) return;\n\n        const currentTime = performance.now();\n        const elapsed = currentTime - this.state.startTime;\n        let progress = elapsed / this.state.duration;\n\n        if (progress >= 1) {\n            progress = 1;\n            this.state.isTransitioning = false;\n        }\n\n        const easedProgress = this.easeInOutCubic(progress);\n\n        // Update all values using interpolation\n        this.renderMaterial.uniforms.uBaseColor.value.lerpVectors(\n            this.state.baseColor,\n            this.state.targetBaseColor,\n            easedProgress\n        );\n\n        this.renderMaterial.uniforms.uSecondaryColor.value.lerpVectors(\n            this.state.secondaryColor,\n            this.state.targetSecondaryColor,\n            easedProgress\n        );\n\n        this.simulationMaterial.uniforms.uNeighborThreshold.value = THREE.MathUtils.lerp(\n            this.state.neighborThreshold,\n            this.state.targetNeighborThreshold,\n            easedProgress\n        );\n\n        this.simulationMaterial.uniforms.uNoiseFactor.value = THREE.MathUtils.lerp(\n            this.state.noiseFactor,\n            this.state.targetNoiseFactor,\n            easedProgress\n        );\n\n        this.renderMaterial.uniforms.uRoughness.value = THREE.MathUtils.lerp(\n            this.state.roughness,\n            this.state.targetRoughness,\n            easedProgress\n        );\n\n        this.renderMaterial.uniforms.uMetalness.value = THREE.MathUtils.lerp(\n            this.state.metalness,\n            this.state.targetMetalness,\n            easedProgress\n        );\n\n        this.simulationMaterial.uniforms.uSpeed.value = THREE.MathUtils.lerp(\n            this.state.speed,\n            this.state.targetSpeed,\n            easedProgress\n        );\n    }\n\n    easeInOutCubic(t) {\n        return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;\n    }\n}\n","// src/js/shaderLoader.js\nimport vertShader from '../shaders/vert.glsl';\nimport originalSimShader from '../shaders/original/sim.glsl';\nimport originalRenderShader from '../shaders/original/render.glsl';\nimport glassSimShader from '../shaders/glass/sim.glsl';\nimport glassRenderShader from '../shaders/glass/render.glsl';\nimport dissolveSimShader from '../shaders/dissolve/sim.glsl';\nimport dissolveRenderShader from '../shaders/dissolve/render.glsl';\nimport imageSimShader from '../shaders/image/sim.glsl';\nimport imageRenderShader from '../shaders/image/render.glsl';\nimport modernSimShader from '../shaders/modern/sim.glsl';\nimport modernRenderShader from '../shaders/modern/render.glsl';\nimport tarSimShader from '../shaders/tar/sim.glsl';\nimport tarRenderShader from '../shaders/tar/render.glsl';\n\nimport originalConfig from '../shaders/original/config.json';\nimport glassConfig from '../shaders/glass/config.json';\nimport dissolveConfig from '../shaders/dissolve/config.json';\nimport imageConfig from '../shaders/image/config.json';\nimport modernConfig from '../shaders/modern/config.json';\nimport tarConfig from '../shaders/tar/config.json';\n\nexport const shaders = {\n    vert: vertShader,\n    original: {\n        sim: originalSimShader,\n        render: originalRenderShader,\n        config: originalConfig\n    },\n    glass: {\n        sim: glassSimShader,\n        render: glassRenderShader,\n        config: glassConfig\n    },\n    dissolve: {\n        sim: dissolveSimShader,\n        render: dissolveRenderShader,\n        config: dissolveConfig\n    },\n    image: {\n        sim: imageSimShader,\n        render: imageRenderShader,\n        config: imageConfig\n    },\n    modern: {\n        sim: modernSimShader,\n        render: modernRenderShader,\n        config: modernConfig\n    },\n    tar: {\n        sim: tarSimShader,\n        render: tarRenderShader,\n        config: tarConfig\n    }\n};","import * as THREE from 'three';\nimport { TransitionManager } from './transManager.js';\nimport { shaders } from './shaderLoader.js';\n\n\nasync function loadShader(shaderType, name) {\n    if (shaderType === 'vert') {\n        console.log('vertex shader loading');\n        return shaders.vert;\n    }\n    return shaders[shaderType][name];\n}\n\nasync function loadTexture(url) {\n    return new Promise((resolve) => {\n        new THREE.TextureLoader().load(url, resolve);\n    });\n}\n\nasync function loadShaderConfig(shaderName) {\n    return shaders[shaderName].config;\n}\n\nexport class SlimeSimulation {\n    constructor(options = {}) {\n        this.shaders = ['dissolve', 'glass', 'original', 'image'];\n        this.currentShader = options.slimeType ||  'original';\n        this.imageUrl = options.imageUrl || null;\n        this.init();\n    }\n\n    async init() {\n        await this.loadCurrentShaderConfig();\n        if (this.imageUrl) {\n            await this.initImageTexture(this.imageUrl);\n        } else {\n            // Create a default 1x1 white texture if no image is provided\n            const defaultTexture = new THREE.DataTexture(\n                new Uint8Array([255, 255, 255, 255]),\n                1, 1,\n                THREE.RGBAFormat\n            );\n            defaultTexture.needsUpdate = true;\n            this.imageTexture = defaultTexture;\n        }\n        await this.initRenderer();\n        await this.initShaders();\n        this.initScene();\n        this.initSimulation();\n        this.initTransitionState();\n        this.addEventListeners();\n        this.animate();\n        this.mouseTimeout = null;\n    }\n\n    loadCurrentShaderConfig = async () => {\n        this.currentConfig = await loadShaderConfig(this.currentShader);\n    }\n\n    initShaders = async () => {\n        this.vertexShader = await loadShader('vert', null);\n        this.simulationShader = await loadShader(this.currentShader, 'sim');\n        this.renderShader = await loadShader(this.currentShader, 'render');\n    }\n\n    initTransitionState() {\n        this.transitionManager = new TransitionManager(this.simulationMaterial, this.renderMaterial);\n    }\n\n    startTransition(newState) {\n        this.transitionManager.startTransition(newState);\n    }\n\n    initRenderer = async () => {\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: document.getElementById('canvas'),\n            antialias: true\n        });\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n    }\n\n    initScene() {\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n        this.quad = new THREE.PlaneGeometry(2, 2);\n    }\n\n    initSimulation() {\n        const size = 512;\n        this.size = size;\n        \n\n        // Create render targets for ping-pong (same as before)\n        this.renderTargets = [\n            new THREE.WebGLRenderTarget(size, size, {\n                minFilter: THREE.LinearFilter,\n                magFilter: THREE.LinearFilter,\n                format: THREE.RGBAFormat,\n                type: THREE.FloatType\n            }),\n            new THREE.WebGLRenderTarget(size, size, {\n                minFilter: THREE.LinearFilter,\n                magFilter: THREE.LinearFilter,\n                format: THREE.RGBAFormat,\n                type: THREE.FloatType\n            })\n        ];\n\n        // Updated simulation material with config values\n        this.simulationMaterial = new THREE.ShaderMaterial({\n            vertexShader: this.vertexShader,\n            fragmentShader: this.simulationShader,\n            uniforms: {\n                uPreviousState: { value: null },\n                uResolution: { value: new THREE.Vector2(size, size) },\n                uMouse: { value: new THREE.Vector2(0.5, 0.5) },\n                uIsMouseDown: { value: false },\n                uTime: { value: 0 },\n                uNoiseFactor: { value: this.currentConfig.noiseFactor },\n                uNeighborThreshold: { value: this.currentConfig.neighborThreshold },\n                uSpeed: { value: this.currentConfig.speed }\n            }\n        });\n\n        // Updated render material with config values\n        this.renderMaterial = new THREE.ShaderMaterial({\n            vertexShader: this.vertexShader,\n            fragmentShader: this.renderShader,\n            uniforms: {\n                uState: { value: null },\n                uTime: { value: 0 },\n                uBaseColor: { \n                    value: new THREE.Vector3(...this.currentConfig.baseColor.slice(0, 3))\n                },\n                uSecondaryColor: { \n                    value: new THREE.Vector4(...this.currentConfig.secondaryColor)\n                },\n                uRoughness: { value: this.currentConfig.roughness },\n                uMetalness: { value: this.currentConfig.metalness },\n                uImageTexture: { value: this.imageTexture }\n            }\n        });\n\n        // Initialize with random state\n        const initialState = new Float32Array(size * size * 4);\n        for (let i = 0; i < initialState.length; i += 4) {\n            initialState[i] = Math.random() * 0.1; // mass\n            initialState[i + 1] = 0; // velocity\n            initialState[i + 2] = 0; // height\n            initialState[i + 3] = 1; // alpha\n        }\n\n        this.renderer.setRenderTarget(this.renderTargets[0]);\n        const texture = new THREE.DataTexture(\n            initialState, size, size, THREE.RGBAFormat, THREE.FloatType\n        );\n        texture.needsUpdate = true;\n\n        const mesh = new THREE.Mesh(this.quad, new THREE.MeshBasicMaterial({\n            map: texture\n        }));\n        const tempScene = new THREE.Scene();\n        tempScene.add(mesh);\n        this.renderer.render(tempScene, this.camera);\n        this.renderer.setRenderTarget(null);\n    }\n\n    initImageTexture = async (imageUrl) => {\n        try {\n            this.imageTexture = await loadTexture(imageUrl);\n        } catch (error) {\n            console.warn('Failed to load image texture:', error);\n            // Fallback to a default texture\n            const defaultTexture = new THREE.DataTexture(\n                new Uint8Array([255, 255, 255, 255]),\n                1, 1,\n                THREE.RGBAFormat\n            );\n            defaultTexture.needsUpdate = true;\n            this.imageTexture = defaultTexture;\n        }\n    }\n\n    addEventListeners() {\n        window.addEventListener('resize', this.onResize.bind(this));\n        window.addEventListener('mousemove', this.onMouseMove.bind(this));\n    }\n\n    onResize() {\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    onMouseMove(event) {\n        this.simulationMaterial.uniforms.uMouse.value.x = event.clientX / window.innerWidth;\n        this.simulationMaterial.uniforms.uMouse.value.y = 1 - (event.clientY / window.innerHeight);\n\n        // Set mouse as active\n        this.simulationMaterial.uniforms.uIsMouseDown.value = true;\n\n        // Clear any existing timeout\n        if (this.mouseTimeout) {\n            clearTimeout(this.mouseTimeout);\n        }\n\n        // Set new timeout\n        this.mouseTimeout = setTimeout(() => {\n            this.simulationMaterial.uniforms.uIsMouseDown.value = false;\n        }, 20);\n    }\n\n    animate() {\n        requestAnimationFrame(this.animate.bind(this));\n\n        const time = performance.now() * 0.001;\n        this.simulationMaterial.uniforms.uTime.value = time;\n        this.renderMaterial.uniforms.uTime.value = time;\n\n        // Update transitions\n        this.transitionManager.update();\n\n        // Simulation step\n        this.simulationMaterial.uniforms.uPreviousState.value = this.renderTargets[0].texture;\n        this.renderer.setRenderTarget(this.renderTargets[1]);\n        this.renderer.render(new THREE.Scene().add(new THREE.Mesh(this.quad, this.simulationMaterial)), this.camera);\n\n        // Render step\n        this.renderMaterial.uniforms.uState.value = this.renderTargets[1].texture;\n        this.renderer.setRenderTarget(null);\n        this.renderer.render(new THREE.Scene().add(new THREE.Mesh(this.quad, this.renderMaterial)), this.camera);\n\n        // Swap buffers\n        [this.renderTargets[0], this.renderTargets[1]] = [this.renderTargets[1], this.renderTargets[0]];\n    }\n\n    changeShader = async (shaderName) => {\n        if (!this.shaders.includes(shaderName)) {\n            console.error(`Invalid shader name: ${shaderName}`);\n            return;\n        }\n\n        this.currentShader = shaderName;\n        await this.loadCurrentShaderConfig();\n        await this.initShaders();\n        \n        // Update materials with new config\n        this.simulationMaterial.uniforms.uNoiseFactor.value = this.currentConfig.noiseFactor;\n        this.simulationMaterial.uniforms.uNeighborThreshold.value = this.currentConfig.neighborThreshold;\n        this.simulationMaterial.uniforms.uSpeed.value = this.currentConfig.speed;\n\n        this.renderMaterial.uniforms.uBaseColor.value.set(...this.currentConfig.baseColor.slice(0, 3));\n        this.renderMaterial.uniforms.uSecondaryColor.value.set(...this.currentConfig.secondaryColor);\n        this.renderMaterial.uniforms.uRoughness.value = this.currentConfig.roughness;\n        this.renderMaterial.uniforms.uMetalness.value = this.currentConfig.metalness;\n    }\n\n    async updateImage(newImageUrl) {\n        if (!newImageUrl) {\n            throw new Error('Image URL is required');\n        }\n        await this.initImageTexture(newImageUrl);\n        this.renderMaterial.uniforms.uImageTexture.value = this.imageTexture;\n    }\n}"],"names":["TransitionManager","constructor","simulationMaterial","renderMaterial","this","state","baseColor","THREE","Vector3","targetBaseColor","secondaryColor","Vector4","targetSecondaryColor","neighborThreshold","targetNeighborThreshold","noiseFactor","targetNoiseFactor","roughness","targetRoughness","metalness","targetMetalness","speed","targetSpeed","isTransitioning","duration","startTime","startTransition","newState","currentTime","performance","now","set","uniforms","uBaseColor","value","x","y","z","uSecondaryColor","w","uNeighborThreshold","uNoiseFactor","uRoughness","uMetalness","uSpeed","copy","undefined","update","progress","easedProgress","easeInOutCubic","lerpVectors","MathUtils","lerp","t","Math","pow","shaders","vert","original","sim","render","config","glass","dissolve","image","modern","tar","async","loadShader","shaderType","name","console","log","options","currentShader","slimeType","imageUrl","init","loadCurrentShaderConfig","initImageTexture","defaultTexture","DataTexture","Uint8Array","RGBAFormat","needsUpdate","imageTexture","initRenderer","initShaders","initScene","initSimulation","initTransitionState","addEventListeners","animate","mouseTimeout","currentConfig","shaderName","loadShaderConfig","vertexShader","simulationShader","renderShader","transitionManager","renderer","WebGLRenderer","canvas","document","getElementById","antialias","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","scene","Scene","camera","OrthographicCamera","quad","PlaneGeometry","size","renderTargets","WebGLRenderTarget","minFilter","LinearFilter","magFilter","format","type","FloatType","ShaderMaterial","fragmentShader","uPreviousState","uResolution","Vector2","uMouse","uIsMouseDown","uTime","uState","slice","uImageTexture","initialState","Float32Array","i","length","random","setRenderTarget","texture","mesh","Mesh","MeshBasicMaterial","map","tempScene","add","url","Promise","resolve","TextureLoader","load","loadTexture","error","warn","addEventListener","onResize","bind","onMouseMove","event","clientX","clientY","clearTimeout","setTimeout","requestAnimationFrame","time","changeShader","includes","updateImage","newImageUrl","Error"],"mappings":"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"}